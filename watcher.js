const chokidar = require('chokidar');
const fs = require('fs');

const ClosureCompiler = require('google-closure-compiler').compiler;
const crass = require('crass');
const minify = require('html-minifier').minify;
const brotli = require('brotli');

const watcher = chokidar.watch(['./staticDev', './viewsDev', './static'], {
  ignored: /.*\.(br|png|ico|woff2|webp|txt)/,
  persistent: true,
  depth: 1,
  awaitWriteFinish: {
    stabilityThreshold: 300,
    pollInterval: 100,
  },
  cwd: './',
});

const log = console.log.bind(console);

watcher
    .on('add', (path) => log(`[ADD] ${path}`))
    .on('change', (path) => {
      switch (path.substring(path.indexOf('.'))) {
        case '.css':
          if (path.includes('staticDev/')) {
            log(`[cssMin] ${path}`);
            cssMin(path);
          } else {
            log(`[brotli] ${path}`);
            brotlify(path);
          } break;
        case '.handlebars': log(`[htmlMin] ${path}`); htmlMin(path); break;
        case '.js':
          if (path.includes('staticDev/')) {
            log(`[jsMin] ${path}`);
            jsMin();
            break;
          } // fall-through
        default: log(`[brotli] ${path}`); brotlify(path);
      }
    })
    .on('unlink', (path) => log(`[REMOVE] ${path}`));

/**
 * Minifies JS files with Closure Compiler
 */
function jsMin() {
  new ClosureCompiler({
    js: './staticDev/js/*.js',
    compilation_level: 'ADVANCED',
    language_in: 'ECMASCRIPT_2019',
    assume_function_wrapper: true,
    use_types_for_optimization: true,
    charset: 'UTF-8',
  }).run((exitCode, stdOut, stdErr) => {
    if (exitCode == 0) {
      if (stdErr) log(`================================================\n${stdErr}================================================\n`);
      const f = stdOut.split('window.placeholder=function(){};');
      fs.writeFile('./static/js/login.js', f[0], (e) => log);
      fs.writeFile('./static/js/script.js', f[1], (e) => log);
    } else {
      log(`Code: [${exitCode}]`);
      log(`Error: [${stdErr}]`);
    }
  });
}

/**
 * Minifies CSS files with Crass
 * @param {string} f Relative path of the css file
 */
function cssMin(f) {
  fs.readFile(f, (error, buffer) => {
    if (error) log;
    fs.writeFile(f.replace('staticDev/', 'static/'),
        crass.parse(buffer.toString()).optimize({
          o1: true,
        }).toString(), (e) => log);
  });
}

/**
 * Minifies HTML files with HTML-minifier
 * @param {string} f Relative path of the HTML file
 */
function htmlMin(f) {
  fs.readFile(f, (error, buffer) => {
    if (error) log;
    fs.writeFile(f.replace('viewsDev/', 'views/'),
        minify(buffer.toString(), {
          collapseWhitespace: true,
          collapseBooleanAttributes: true,
          includeAutoGeneratedTags: true,
          minifyCSS: true,
          minifyJS: true,
          removeComments: true,
          removeEmptyAttributes: true,
          removeRedundantAttributes: true,
          removeScriptTypeAttributes: true,
          removeStyleLinkTypeAttributes: true,
          sortAttributes: true,
          sortClassName: true,
        }), (e) => log);
  });
}

/**
 * Compresses files using Brotli
 * @param {string} f Relative path of the file
 */
function brotlify(f) {
  fs.readFile(f, (error, buffer) => {
    if (error) log;
    fs.writeFile(`${f}.br`,
        brotli.compress(buffer, {
          mode: 1,
          quality: 11,
          lgwin: 24,
          lgblock: 0,
        }), (e) => log);
  });
}
